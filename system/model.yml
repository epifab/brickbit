tables:
  session:
    fields:
      id:
        type: integer
      user_id:
        desc: User id
        type: integer
      session_id:
        desc: Session id
        type: string
        size: 32
      create_time:
        desc: Last session
        type: datetime
      update_time:
        desc: Last session
        type: datetime
      expire_time:
        desc: Expire date
        type: datetime
      data:
        desc: Session data
        type: blob
    keys:
      primary:
        fields: [id]
        autoIncrement: 1
      user_session:
        fields: [user_id, session_id]
    relations:
      user:
        table: user
        type: N-1
        clauses: {user_id: id}
  module:
    fields:
      id:
        type: integer
      name:
        type: string
        size: 32
      class:
        type: string
        size: 32
      weight:
        type: integer
      enabled:
        type: boolean
    keys:
      primary:
        fields: [id]
        autoIncrement: 1
      name_key:
        fields: [name]
    relations:
      components:
        table: component
        type: 1-N
        clauses: {id: module_id}
        onDelete: CASCADE
  component:
    fields:
      id:
        type: integer
      module_id:
        type: integer
      name:
        type: string
        size: 32
    keys:
      primary:
        fields: [id]
      name_key:
        fields: [module_id, name]
    relations:
      module:
        table: module
        type: N-1
        clauses: {module_id: id}
      actions:
        table: action
        type: 1-N
        clauses: {id: component_id}
        onDelete: CASCADE
  action:
    fields:
      id:
        type: integer
      name:
        type: string
        size: 32
      component_id:
        type: integer
      name:
        type: string
        size: 32
      url:
        type: string
        size: 128
    keys:
      primary:
        fields: [id]
      name_key:
        fields: [component_id, name]
    relations:
      component:
        table: component
        type: N-1
        clauses: {component_id: id}
  user:
    fields:
      id:
        type: integer
      email:
        type: string
        label: Email
        size: 128
      password:
        type: string
        label: Password
        size: 32
      full_name:
        type: string
        label: Full name
        size: 128
      last_login:
        type: datetime
        label: Last login
      ins_date_time:
        type: datetime
        label: Registration date
      last_upd_date_time:
        type: datetime
        label: Last update
    keys:
      primary:
        fields: [id]
        autoIncrement: 1
      email_key:
        fields: [email]
    relations:
      roles:
        table: user_role
        type: 1-N
        clauses: {id: user_id}
        onDelete: CASCADE
  role:
    fields:
      id:
        type: integer
      description:
        type: string
        size: 128
    keys:
      primary:
        fields: [id]
        autoIncrement: 1
    relations:
      users:
        table: user_role
        type: 1-N
        clauses: {id: user_id}  
        onDelete: CASCADE
  #    components:
  #      table: role_component
  #      type: 1-N
  #      clauses: {id: role_id}
  #      onDelete: CASCADE
      actions:
        table: role_action
        type: 1-N
        clauses: {id: role_id}
        onDelete: CASCADE
  user_role:
    fields:
      user_id:
        type: integer
      role_id:
        type: integer
    keys:
      primary:
        fields: [user_id, role_id]
    relations:
      user:
        table: user
        type: N-1
        clauses: {user_id: id}
      role:
        table: role
        type: N-1
        clauses: {role_id: id}
  #role_component:
  #  fields:
  #    role_id:
  #      type: integer
  #    component_id:
  #      type: integer
  #  keys:
  #    primary:
  #      fields: [role_id, component_id]
  #  relations:
  #    component:
  #      table: component
  #      type: N-1
  #      clauses: {component_id: id}
  #    role:
  #      table: role
  #      type: N-1
  #      clauses: {role_id: id}
  role_action:
    fields:
      role_id:
        type: integer
      action_id:
        type: integer
    keys:
      primary:
        fields: [role_id, action_id]
    relations:
      action:
        table: action
        type: N-1
        clauses: {action_id: id}
      role:
        table: role
        type: N-1
        clauses: {role_id: id}
  log:
    fields:
      id:
        type: integer
        label: Id
      url:
        type: string
        size: 1024
        label: URL
      level:
        type: integer
        label: Level
      code:
        type: string
        size: 64
        label: Code
      body:
        type: string
        label: Body
      trace:
        type: string
        label: Trace
      date_time_request:
        type: datetime
        label: Request date
      user_id:
        type: integer
        label: User id
      ip_address:
        type: string
        size: 16
        label: IP address
    keys:
      primary:
        fields: [id]
        autoIncrement: 1
    relations:
      user:
        type: N-1
        table: user
        clauses: {user_id: id}
    virtuals:
       level_class:
          type: string
          dependencies: level
          handler: |
            function($log) {
               switch ($log->level) {
                  case \system\LOG_NOTICE:
                     return 'success';
                     break;
                  case \system\LOG_WARNING:
                     return 'warning';
                     break;
                  case \system\LOG_ERROR:
                     return 'danger';
                     break;
                  case \system\LOG_DEBUG:
                     return 'info';
                     break;
               }
            }