tables:
  dir:
    fields:
      id:
        type: integer
        label: Id
      path:
        type: plaintext
        label: Path
        maxlength: 32
    keys:
      primary:
        fields: [id]
        primary: 1
        autoIncrement: 1
    relations:
      files:
        table: file
        clauses: [id: dir_id]
        type: 1-N
  file:
    fields:
      id:
        type: integer
        label: Id
      dir_id:
        type: integer
        label: Dir Id
      name:
        type: plaintext
        label: File name
        maxlength: 32
        regexp: /^[a-zA-Z0-9._-]+$/
      size:
        type: integer
        label: Bytes
    keys:
      primary:
        fields: [id]
        primary: 1
        autoIncrement: 1
    relations:
      dir:
        table: dir
        clauses: [dir_id: id]
        type: N-1
      node:
        table: node_file
        clauses: [id: file_id]
        type: 1-1
    virtuals:
      path:
        dependencies: [dir.path, name]
        label: File path
        handler: |
          function($file) {
            return $file->dir->path . $file->name;
          }
      extension:
        dependencies: [name]
        label: File extension
        handler: |
          function($file) {
            return \system\File::getExtension($file->name);
          }
      last_update:
        dependencies: [path]
        label: Last update
        handler: |
          function($file) {
            return \filetime($file->path);
          }
  vocabulary:
    fields:
      id:
        type: integer
        label: Id
      name:
        type: plaintext
        label: Vocabulary
        maxlength: 32
    keys:
      primary:
        fields: [id]
        primary: 1
        autoIncrement: 1
    relations:
      terms:
        table: term
        clauses: [id: vocabulary_id]
        type: 1-N
  term:
    fields:
      id:
        type: integer
        label: Id
      vocabulary_id:
        type: integer
        label: Vocabulary
      parent_id:
        type: integer
        label: Parent term
      ldel:
        type: integer
        label: Left delimiter
      rdel:
        type: integer
        label: Right delimiter
      urn:
        type: plaintext
        label: Term URN
        maxlength: 32
        regexp: /^[A-Za-z0-9_-]+$/
      value:
        type: plaintext
        label: Label
        minlength: 1
        maxlength: 64
    keys:
      primary:
        fields: [id]
        primary: 1
        autoIncrement: 1
    relations:
      vocabulary:
        table: vocabulary
        type: N-1
        clauses: [vocabulary_id: id]
      parent:
        table: term
        type: N-1
        clauses: [parent_id: id]
      children:
        table: term
        type: 1-N
        clauses: [id: parent_id]
        onDelete: CASCADE
        selectKey: id
      ancestors:
        table: term
        clauses: []
        type: 1-N
        filterHandler: [\module\core\model\Tree, ancestorsFilter]
      descendants:
        table: term
        clauses: []
        type: 1-N
        filterHandler: [\module\core\model\Tree, descendantsFilter]
      nodes:
        table: node_term
        type: 1-N
        clauses: [id: term_id]
        onDelete: CASCADE
        selectKey: node_id
  node_term:
    fields:
      node_id:
        type: integer
        label: Node id
      term_id:
        type: integer
        label: Term id
    keys:
      primary:
        fields: [node_id, term_id]
        primary: 1
    relations:
      node:
        table: node
        type: N-1
        clauses: [node_id: id]
      term:
        table: term
        type: N-1
        clauses: [term_id: id]
  node_text:
    fields:
      node_id:
        type: integer
        label: Node id
      lang:
        type: plaintext
        label: Language
        minlength: 2
        maxlength: 2
      urn:
        type: plaintext
        label: URN
#        Ideas to improve metatypes validation..
#        validation:
#          - regexp: /^[A-Za-z0-9_-]+$/
#            message: Invalid @label
#          - minlength: 3
#            message: @label too short
#          - maxlength: 32
#            message: @label too long
        regexp: /^[A-Za-z0-9_-]+$/
        minlength: 3
        maxlength: 32
      description:
        type: plaintext
        label: Description
        maxlength: 128
      title:
        type: plaintext
        label: Title
        maxlength: 64
      subtitle:
        type: plaintext
        label: Subtitle
        maxlength: 128
      preview:
        type: html
        label: Preview
        # allow just a limited number of tags and attributes
        html: filtered
      body:
        type: html
        label: Body
        # allow just a limited number of tags and attributes
        html: filtered
    keys:
      primary:
        fields: [node_id, lang]
        primary: 1
      urn_key:
        fields: [urn, lang]
    relations:
      node:
        type: N-1
        table: node
        clauses: [node_id: id]
#  menu:
#    fields:
#      id:
#        type: integer
#        label: Id
#      name:
#        type: string
#        size: 32
#    keys:
#      primary:
#        fields: [id]
#        autoIncrement: 1
#    relations:
#      items:
#        table: menu_item
#        type: 1-N
#        onDelete: CASCADE
#  menu_item:
#    fields:
#      id:
#        type: integer
#        label: Id
#      menu_id:
#        type: integer
#        label: Menu Id
#      url:
#        type: string
#        size: 32
#      title:
#        type: string
#        size: 64
#      sort_index:
#        type: integer
#    keys:
#      primary:
#        fields: [id]
#        autoIncrement: 1
#    relations:
#      menu:
#        table: menu
#        type: N-1
  node:
    fields:
      id:
        type: integer
        label: Id
      record_mode_id:
        type: integer
        label: Record mode id
      ldel:
        type: integer
        label: Left delimiter
      rdel:
        type: integer
        label: Right delimiter
      parent_id:
        type: integer
        label: Parent id
      type:
        type: plaintext
        label: Type
        maxlength: 16
      subtype:
        type: plaintext
        label: Subtype
        maxlength: 16
      sort_index:
        type: integer
        label: Sort index
      temp:
        type: boolean
        label: Temp content
    keys:
      primary:
        fields: [id]
        autoIncrement: 1
        primary: 1
    relations:
      record_mode:
        table: record_mode
        type: 1-1
        clauses: [record_mode_id: id]
      parent:
        table: node
        type: N-1
        clauses: [parent_id: id]
      children:
        table: node
        type: 1-N
        clauses: [id: parent_id]
        onDelete: CASCADE
      ancestors:
        table: node
        clauses: []
        type: 1-N
        filterHandler: [\module\core\model\Tree, ancestorsFilter]
      descendants:
        table: node
        clauses: []
        type: 1-N
        filterHandler: [\module\core\model\Tree, descendantsFilter]
      # TERMS
      terms:
        table: node_term
        type: 1-N
        clauses: [id: node_id]
        onDelete: CASCADE
        selectKey: term_id
      # TRANSLATIONS
      texts:
        table: node_text
        type: 1-N
        clauses: [id: node_id]
        onDelete: CASCADE
        selectKey: lang
      text:
        table: node_text
        type: 1-1
        clauses: [id: node_id]
        filterHandler: [\module\core\model\Node, textFilter]
      # FILES
      files:
        table: node_file
        type: 1-N
        clauses: [id: node_id]
        onDelete: CASCADE
        selectKey: file_id
    virtuals:
      # 'children recursive' can be used instead of children
      # it automatically loads the same fields and relations used for the parent
      #  node
      children_recursive:
        dependencies: [id]
        handler: [\module\core\model\Node, getChildrenRecursive]
      children_grouped_by_type:
        dependencies: [children]
        handler: [\module\core\model\Node, getChildrenGroupedByType]
      valid_children_types:
        dependencies: [type]
        handler: [\module\core\model\Node, getValidChildrenTypes]
      valid_file_keys:
        dependencies: [type]
        handler: [\module\core\model\Node, getValidFileKeys]
      # urls
      url:
        label: URL
        dependencies: [id, text]
        handler: [\module\core\model\Node, getUrl]
      edit_url:
        label: Edit URL
        dependencies: [id]
        handler: [\module\core\model\Node, getEditUrl]
      delete_url:
        label: Delete URL
        dependencies: [id]
        handler: [\module\core\model\Node, getDeleteUrl]
      # title
      title:
        label: Title
        dependencies: [text.title]
        handler: [\module\core\model\Node, getTitle]
      # content
      content:
        label: Content
        dependencies: [id, type]
        handler: [\module\core\model\Node, getContent]
  node_file:
    fields:
      node_id:
        type: integer
      node_index:
        type: plaintext
        maxlength: 32
      sort_index:
        type: integer
      file_id:
        type: integer
      virtual_name:
        type: plaintext
        maxlength: 32
      preview_file_path:
        type: plaintext
        maxlength: 32
      download_mode:
        type: integer
        options:
#          0: Nobody
#          1: Superuser
          2: Node owner only
          3: Node admins
          4: Registered
          5: Anyone
    keys:
      primary:
        fields: [file_id]
        primary: 1
        autoIncrement: 1
      node_key:
        fields: [node_id, node_index, virtual_name]
    relations:
      node:
        type: N-1
        table: node
        clauses: [node_id: id]
      file:
        type: 1-1
        table: file
        clauses: [file_id: id]
        onDelete: CASCADE
    virtuals:
      url:
        label: URL
        dependencies: [file_id, file.extension, node_id, node_index, virtual_name]
        handler: [\module\core\model\NodeFile, getUrl]
      edit_url:
        label: Edit URL
        dependencies: [file_id]
        handler: [\module\core\model\NodeFile, getEditUrl]
      delete_url:
        label: Delete URL
        dependencies: [file_id]
        handler: [\module\core\model\NodeFile, getDeleteUrl]
      download_path:
        handler: |
          function($recordset) {
            return $recordset->virtual_name;
          }
      images:
        label: Images
        dependencies: [file_id, file.extension, node_id, node_index, virtual_name]
        handler: [\module\core\model\NodeFile, getImages]
  user:
    fields:
      password:
        type: password
    virtuals:
      superuser:
        handler: |
          function($user) {
            return $user->id == 1;
          }
      anonymous:
        handler: |
          function($user) {
            return $user->id == 0;
          }
      url:
        label: URL
        dependencies: [id]
        handler: [\module\core\model\User, getUrl]
      edit_url:
        label: Edit URL
        dependencies: [id]
        handler: [\module\core\model\User, getEditUrl]
      delete_url:
        label: Delete URL
        dependencies: [id]
        handler: [\module\core\model\User, getDeleteUrl]