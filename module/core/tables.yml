dir:
  fields:
    id:
      type: MetaInteger
    path:
      type: MetaString
      size: 32
  keys:
    primary:
      fields: [id]
      autoIncrement: 1
  relations:
    files:
      table: file
      clauses: [id: dir_id]
      type: 1-N
      onDelete: CASCADE
file:
  fields:
    id:
      type: MetaInteger
    dir_id:
      type: MetaInteger
    name:
      type: MetaString
      size: 32
    record_mode_id:
      type: MetaInteger
    path:
      type: MetaVirtual
      dependencies: [dir.path]
      handle: |
        function(\system\model\Recordset $file) {
          return $file->dir->path . $file->name;
        }
    extension:
      type: MetaVirtual
      dependencies: [name]
      handle: |
        function(\system\model\Recordset $file) {
          return \system\File::getExtension($file->name);
        }
  keys:
    primary:
      fields: [id]
      autoIncrement: 1
  relations:
    record_mode:
      table: record_mode
      type: 1-1
      clauses: [record_mode_id: id]
    dir:
      table: dir
      clauses: [dir_id: id]
      type: N-1
    node:
      table: node_file
      clauses: [id: file_id]
      type: 1-1
comment:
  fields:
    id:
      type: MetaInteger
    content_id:
      type: MetaInteger
    comment_id:
      type: MetaInteger
    title:
      type: MetaString
      size: 80
    approved:
      type: MetaBoolean
  keys:
    primary:
      fields: [id]
      autoincrement: 1
  relations:
    content:
      table: content
      type: N-1
      clauses: [content_id: id]
      join: LEFT
    comment:
      table: comment
      type: N-1
      clauses: [comment_id: id]
      join: LEFT
term:
  fields:
    id:
      type: MetaInteger
    parent_id:
      type: MetaInteger
    ldel:
      type: MetaInteger
    rdel:
      type: MetaInteger
    value:
      type: MetaString
      size: 64
  keys:
    primary:
      fields: [id]
      autoIncrement: 1
  relations:
    parent:
      table: term
      type: N-1
      clauses: [parent_id: id]
    children:
      table: term
      type: 1-N
      clauses: [id: parent_id]
      onDelete: CASCADE
    ancestors:
      table: term
      clauses: []
      type: 1-N
      filterHandle: \module\core\model\Callbacks::termAncestors
    descendants:
      table: term
      clauses: []
      type: 1-N
      filterHandle: \module\core\model\Callbacks::termDescendants
    nodes:
      table: node_term
      type: 1-N
      clauses: [id: term_id]
      onDelete: CASCADE
node_term:
  fields:
    node_id:
      type: MetaInteger
    term_id:
      type: MetaInteger
  keys:
    primary:
      fields: [node_id, term_id]
  relations:
    node:
      table: node
      type: N-1
      clauses: [node_id: id]
    term:
      table: term
      type: N-1
      clauses: [term_id: id]
node_text:
  fields:
    node_id:
      type: MetaInteger
    lang:
      type: MetaString
      size: 2
    urn:
      type: MetaString
      size: 32
    title:
      type: MetaString
      size: 64
    subtitle:
      type: MetaString
      size: 128
    preview:
      type: MetaString
      size: 256
    body:
      type: MetaString
  keys:
    primary_key:
      fields: [node_id, lang]
    urn_key:
      fields: [urn, lang]
  relations:
    node:
      type: N-1
      table: node
      clauses: [node_id: id]
node:
  fields:
    id:
      type: MetaInteger
    record_mode_id:
      type: MetaInteger
    ldel:
      type: MetaInteger
    rdel:
      type: MetaInteger
    parent_id:
      type: MetaInteger
    type:
      type: MetaString
      size: 16
    subtype:
      type: MetaString
      size: 16
    sort_index:
      type: MetaInteger
  keys:
    primary_key:
      fields: [id]
  relations:
    record_mode:
      table: record_mode
      type: 1-1
      clauses: [record_mode_id: id]
# ancestors/descendants
    parent:
      table: node
      type: N-1
      clauses: [parent_id: id]
    children:
      table: node
      type: 1-N
      clauses: [id: parent_id]
      onDelete: CASCADE
    ancestors:
      table: node
      clauses: []
      type: 1-N
      filterHandle: \module\core\model\Callbacks::ancestors
    descendants:
      table: node
      clauses: []
      type: 1-N
      filterHandle: \module\core\model\Callbacks::descendants
# TERMS
    terms:
      table: node_term
      type: 1-N
      clauses: [id: node_id]
      onDelete: CASCADE
# TRANSLATIONS
    texts:
      table: node_text
      type: 1-N
      clauses: [id: node_id]
      onDelete: CASCADE
    text:
      table: node_text
      type: 1-1
      clauses: [id: node_id]
      filterHandle: |
        function(\system\model\RecordsetBuilder $node, \system\model\RecordsetBuilder $text) {
          $text->addFilter(new \system\model\FilterClause(
            $text->lang, '=', \system\Lang::getLang()
          ));
        }
    text_und:
      table: node_text
      type: 1-1
      clauses: [id: node_id]
      filterHandle: |
        function(\system\model\RecordsetBuilder $node, \system\model\RecordsetBuilder $text) {
          $text->addFilter(new \system\model\FilterClause(
            $text->lang, 'IS_NULL'
          ));
        }
    text_en:
      table: node_text
      type: 1-1
      clauses: [id: node_id]
      filterHandle: |
        function(\system\model\RecordsetBuilder $node, \system\model\RecordsetBuilder $text) {
          $text->addFilter(new \system\model\FilterClause(
            $text->lang, '=', 'en'
          ));
        }
    text_it:
      table: node_text
      type: 1-1
      clauses: [id: node_id]
      filterHandle: |
        function(\system\model\RecordsetBuilder $node, \system\model\RecordsetBuilder $text) {
          $text->addFilter(new \system\model\FilterClause(
            $text->lang, '=', 'it'
          ));
        }
    text_de:
      table: node_text
      type: 1-1
      clauses: [id: node_id]
      filterHandle: |
        function(\system\model\RecordsetBuilder $node, \system\model\RecordsetBuilder $text) {
          $text->addFilter(new \system\model\FilterClause(
            $text->lang, '=', 'de'
          ));
        }
# FILES
    files:
      table: file
      type: 1-N
      clauses: [id: node_id]
      onDelete: CASCADE
# VIRTUALS - PAGE
    page_header:
      table: node
      type: 1-1
      clauses: [id: parent_id]
      filterHandle: |
        function(\system\model\RecordsetBuilder $parent, \system\model\RecordsetBuilder $child) {
          $child->addFilter(new \system\model\FilterClause(
            $child->type, '=', 'page',
            $child->type, '=', 'header'
          ));
        }
    page_footer:
      table: node
      type: 1-1
      clauses: [id: parent_id]
      filterHandle: |
        function(\system\model\RecordsetBuilder $parent, \system\model\RecordsetBuilder $child) {
          $child->addFilter(new \system\model\FilterClause(
            $child->type, '=', 'page',
            $child->type, '=', 'footer'
          ));
        }
    page_banners:
      table: node
      type: 1-N
      clauses: [id: parent_id]
      filterHandle: |
        function(\system\model\Recordset $parent, \system\model\RecordsetBuilder $child) {
          $child->addFilter(new \system\model\FilterClause(
            $child->type, '=', 'page',
            $child->subtype, '=', 'banner'
          ));
        }
    page_articles:
      table: node
      type: 1-N
      clauses: [id: parent_id]
      filterHandle: |
        function(\system\model\Recordset $parent, \system\model\RecordsetBuilder $child) {
          $child->addFilter(new \system\model\FilterClause(
            $child->type, '=', 'article',
            $child->subtype, 'IS_NULL'
          ));
        }
# VIRTUALS - ARTICLES
    article_attachements:
      table: node
      type: 1-N
      clauses: [id: parent_id]
      filterHandle: |
        function(\system\model\Recordset $parent, \system\model\RecordsetBuilder $child) {
          $child->addFilter(new \system\model\FilterClause(
            $child->type, '=', 'article',
            $child->subtype, '=', 'attachement'
          ));
        }
    article_images:
      table: node
      type: 1-N
      clauses: [id: parent_id]
      filterHandle: |
        function(\system\model\Recordset $parent, \system\model\RecordsetBuilder $child) {
          $child->addFilter(new \system\model\FilterClause(
            $child->type, '=', 'article',
            $child->subtype, '=', 'image'
          ));
        }
    article_mp3s:
      table: node
      type: 1-N
      clauses: [id: parent_id]
      filterHandle: |
        function(\system\model\Recordset $parent, \system\model\RecordsetBuilder $child) {
          $child->addFilter(new \system\model\FilterClause(
            $child->type, '=', 'article',
            $child->subtype, '=', 'mp3'
          ));
        }
    article_videos:
      table: node
      type: 1-N
      clauses: [id: parent_id]
      filterHandle: |
        function(\system\model\Recordset $parent, \system\model\RecordsetBuilder $child) {
          $child->addFilter(new \system\model\FilterClause(
            $child->type, '=', 'article',
            $child->subtype, '=', 'video'
          ));
        }
node_file:
  fields:
    node_id:
      type: MetaInteger
    index:
      type: MetaString
      size: 16
    sort_index:
      type: MetaInteger
    file_id:
      type: MetaInteger
    virtual_name:
      type: MetaString
      size: 32
    download_mode:
      type: MetaOption
      options:
#        0: Nobody
#        1: Superuser
        2: Node owner only
        3: Node admins
        4: Registered
        5: Anyone
    download_path:
      type: MetaVirtual
      handle: |
        function($recordset) {
          return $recordset->virtual_name;
        }
  keys:
    primary:
      fields: [node_id, index]
  relations:
    node:
      type: N-1
      table: node
      clauses: [node_id: id]
    file:
      type: 1-1
      table: file
      clauses: [file_id: id]
      onDelete: DELETE
user:
  fields:
    superuser:
      type: MetaVirtual
      handle: |
        function(\system\model\Recordset $user) {
          return $user->id == 1;
        }