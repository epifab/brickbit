(#) DONE
(-) not completed
(*) not started

-- 02

* forms
  * sistema form (templates)
		gestore form: all'interno di un elemento form tenere traccia di tutti i widget che rappresentano inpu

		<form(name)>
			<textbox(recordset, path1, attributes)>
			<textbox(recordset, path2, attributes)>
			<textbox(recordset, path3, attributes)>
		</form>

		/**
		 * startForm generates a form id and initialize a variable $_SESSION['forms'][$formId'] = array()
		 * since a form is open input elements may be attached to it via addInput method
		 *  - information about the attached fields are added to $_SESSION['forms'][$formId'] indexed by field name
		 *  - those information will be used by the core once the form is submitted
		 * the method also store the current form id in a variable, making sure there isn't another active form already
		 * after the form is submitted, the core should:
		 *  1) look for a $_REQUEST['system']['formId'] to detect a form submission
		 *  2) check whether the submission is valid: isset($_SESSION['forms'][$_REQUEST['system']['formId']])
		 *  3) formally validate the input storing errors in an associative array indexed by input name - says $inputErrors
		 *  4) convert input value from external into internal format (if any validation error hasn't been detected)
		 *  5) store the converted values in an associative array $inputValues indexed by input name
		 *  6) if a component method submitAction exists, it should be run instead of the runAction one
		 *
		 */
		\system\Form::startForm(name);
		\system\Form::createForm(name);

		\system\Form::addInput(name, conversionHandler, validationHandler); 

		widgets responsible to display input elements should register the name of the input 
		and a handler to convert the value from the input to the 


-- 01

# fields system
	# il tipo dei campi non dovrebbe riferirsi direttamente ad una classe ma essere generico esempio "int" o "real"
	  il mapping "tipo campo" => "classe" (che estende MetaType) dovrebbe essere determinato
	  da un evento del modulo come metaTypesMap() : array(tipo1 => classe1, tipo2 => classe2, ...)
	  inoltre, per i tipi base (int, real, string, date, time, datetime) dovrebbero essere fornite delle classi di default
	  (ovviamente anch'esse definibili a runtime attraverso l'evento)
	  infine va rivista l'intera classe MetaType
	  anche la definizione stessa dei campi nel model.yml dovrebbe essere adattata ai cambiamenti
	# il valore di widget (fornito di default dalla classe MetaType) 
	  potrebbe essere utilizzato come template API per la visualizzazione del form

# rivedere struttura file yml 
  (sarebbe meglio avere un file info.yml prettamente di configurazione 
   e due file separati controller.yml e model.yml per i due strati)
  sarebbe anche eventualmente da rivedere nome e posizione del file yml per le tabelle di base

# completare sviluppo delle API per i templates

# riprendere sviluppo e testing del core

# nuovo sistema templates

- 

- estendibilita' (creare almeno un secondo modulo di test)

- piattaforma frontend